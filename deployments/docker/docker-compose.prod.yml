# Production Docker Compose configuration for Crypto Trading Bots
# This file contains production-ready deployment configuration

version: '3.8'

services:
  # DCA Bot Service
  dca-bot:
    build: 
      context: ../..
      dockerfile: Dockerfile
    container_name: crypto-dca-bot-prod
    ports:
      - "8080:8080"
    volumes:
      - ../../configs:/app/configs:ro
      - ../../logs:/app/logs
      - dca-data:/app/data
    environment:
      - EXCHANGE_API_KEY=${EXCHANGE_API_KEY}
      - EXCHANGE_SECRET_KEY=${EXCHANGE_SECRET_KEY}
      - EXCHANGE_SANDBOX=false
      - LOG_LEVEL=info
      - ENVIRONMENT=production
    command: ["./bin/dca-bot", "-config", "configs/dca-config.json"]
    restart: unless-stopped
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Grid Bot Service
  grid-bot:
    build: 
      context: ../..
      dockerfile: Dockerfile
    container_name: crypto-grid-bot-prod
    ports:
      - "8081:8081"
    volumes:
      - ../../configs:/app/configs:ro
      - ../../logs:/app/logs
      - grid-data:/app/data
    environment:
      - EXCHANGE_API_KEY=${EXCHANGE_API_KEY}
      - EXCHANGE_SECRET_KEY=${EXCHANGE_SECRET_KEY}
      - EXCHANGE_SANDBOX=false
      - LOG_LEVEL=info
      - ENVIRONMENT=production
    command: ["./bin/grid-bot", "-config", "configs/grid-config.json"]
    restart: unless-stopped
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Combo Bot Service
  combo-bot:
    build: 
      context: ../..
      dockerfile: Dockerfile
    container_name: crypto-combo-bot-prod
    ports:
      - "8082:8082"
    volumes:
      - ../../configs:/app/configs:ro
      - ../../logs:/app/logs
      - combo-data:/app/data
    environment:
      - EXCHANGE_API_KEY=${EXCHANGE_API_KEY}
      - EXCHANGE_SECRET_KEY=${EXCHANGE_SECRET_KEY}
      - EXCHANGE_SANDBOX=false
      - LOG_LEVEL=info
      - ENVIRONMENT=production
    command: ["./bin/combo-bot", "-config", "configs/combo-config.json"]
    restart: unless-stopped
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backtester Service (for scheduled backtesting)
  backtester:
    build: 
      context: ../..
      dockerfile: Dockerfile
    container_name: crypto-backtester-prod
    volumes:
      - ../../test/data:/app/test/data:ro
      - ../../logs:/app/logs
      - backtest-data:/app/data
    environment:
      - LOG_LEVEL=info
      - ENVIRONMENT=production
    command: ["./bin/backtester", "-data", "test/data/BTCUSDT-1h.csv", "-start", "2024-01-01T00:00:00Z", "-end", "2024-01-31T23:59:59Z"]
    restart: "no"
    networks:
      - crypto-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: crypto-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - dca-bot
      - grid-bot
      - combo-bot
    restart: unless-stopped
    networks:
      - crypto-network

  # Redis for caching and session storage
  redis:
    image: redis:alpine
    container_name: crypto-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - crypto-network
    command: redis-server --appendonly yes

  # PostgreSQL for data persistence
  postgres:
    image: postgres:15-alpine
    container_name: crypto-postgres-prod
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      - POSTGRES_DB=crypto_trading
      - POSTGRES_USER=crypto_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    restart: unless-stopped
    networks:
      - crypto-network

networks:
  crypto-network:
    driver: bridge

volumes:
  dca-data:
    driver: local
  grid-data:
    driver: local
  combo-data:
    driver: local
  backtest-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
