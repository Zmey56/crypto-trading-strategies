package main

import (
	"context"
	"crypto-trading-strategies/internal/config"
	"crypto-trading-strategies/internal/logger"
	"crypto-trading-strategies/internal/portfolio"
	"crypto-trading-strategies/internal/strategy"
	"crypto-trading-strategies/pkg/types"
	"flag"
	"fmt"
	"os"
	"os/signal"
	"syscall"
	"time"
)

func main() {
	// –ü–∞—Ä—Å–∏–º —Ñ–ª–∞–≥–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	configFile := flag.String("config", "", "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
	flag.Parse()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	var cfg *config.Config
	var err error

	if *configFile != "" {
		cfg, err = config.Load(*configFile)
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v\n", err)
			os.Exit(1)
		}
	} else {
		cfg = config.LoadFromEnv()
	}

	// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
	logLevel := logger.LevelInfo
	switch cfg.Logging.Level {
	case "debug":
		logLevel = logger.LevelDebug
	case "warn":
		logLevel = logger.LevelWarn
	case "error":
		logLevel = logger.LevelError
	}

	var log *logger.Logger
	if cfg.Logging.File != "" {
		log, err = logger.NewWithFile(logLevel, cfg.Logging.File)
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞: %v\n", err)
			os.Exit(1)
		}
	} else {
		log = logger.New(logLevel)
	}

	log.Info("ü§ñ DCA Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
	log.Info("–í–µ—Ä—Å–∏—è: %s", cfg.App.Version)
	log.Info("–ë–∏—Ä–∂–∞: %s", cfg.Exchange.Name)
	log.Info("–°–∏–º–≤–æ–ª: %s", cfg.Strategy.DCA.Symbol)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–º–µ–Ω–æ–π
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –°–æ–∑–¥–∞–µ–º mock exchange client (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª–∏–µ–Ω—Ç)
	exchange := createMockExchange(cfg, log)

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
	portfolioManager := portfolio.NewManager(exchange, log)

	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
	strategyFactory := strategy.NewFactory(log)

	// –°–æ–∑–¥–∞–µ–º DCA —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
	dcaStrategy, err := strategyFactory.CreateDCA(*cfg.Strategy.DCA, exchange)
	if err != nil {
		log.Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DCA —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: %v", err)
		os.Exit(1)
	}

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
	if err := dcaStrategy.ValidateConfig(); err != nil {
		log.Error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
		os.Exit(1)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
	go portfolioManager.StartAutoRefresh(ctx, 30*time.Second)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏
	go runTradingLoop(ctx, dcaStrategy, exchange, log, cfg.Strategy.DCA.Symbol)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
	if cfg.App.Port > 0 {
		go startHTTPServer(ctx, cfg, log, dcaStrategy, portfolioManager)
	}

	log.Info("DCA Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")

	// –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-sigChan
	log.Info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")

	// Graceful shutdown
	shutdownCtx, shutdownCancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer shutdownCancel()

	if err := dcaStrategy.Shutdown(shutdownCtx); err != nil {
		log.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: %v", err)
	}

	log.Info("DCA Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// runTradingLoop –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏
func runTradingLoop(ctx context.Context, strategy strategy.Strategy, exchange types.ExchangeClient, log *logger.Logger, symbol string) {
	ticker := time.NewTicker(1 * time.Minute) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
	defer ticker.Stop()

	log.Info("–ó–∞–ø—É—â–µ–Ω —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –¥–ª—è %s", symbol)

	for {
		select {
		case <-ctx.Done():
			log.Info("–¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			return
		case <-ticker.C:
			// –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
			marketData, err := getMarketData(ctx, exchange, symbol)
			if err != nil {
				log.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
				continue
			}

			// –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
			if err := strategy.Execute(ctx, marketData); err != nil {
				log.Error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: %v", err)
			}

			// –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
			metrics := strategy.GetMetrics()
			log.Debug("–ú–µ—Ç—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: %+v", metrics)
		}
	}
}

// getMarketData –ø–æ–ª—É—á–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
func getMarketData(ctx context.Context, exchange types.ExchangeClient, symbol string) (types.MarketData, error) {
	ticker, err := exchange.GetTicker(ctx, symbol)
	if err != nil {
		return types.MarketData{}, err
	}

	return types.MarketData{
		Symbol:    symbol,
		Price:     ticker.Price,
		Volume:    ticker.Volume,
		Timestamp: ticker.Timestamp,
		Ticker:    ticker,
	}, nil
}

// createMockExchange —Å–æ–∑–¥–∞–µ—Ç mock exchange client –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
func createMockExchange(cfg *config.Config, log *logger.Logger) types.ExchangeClient {
	return &MockExchangeClient{
		config: cfg,
		logger: log,
	}
}

// MockExchangeClient –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç mock –∫–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏
type MockExchangeClient struct {
	config *config.Config
	logger *logger.Logger
}

func (m *MockExchangeClient) PlaceOrder(ctx context.Context, order types.Order) error {
	m.logger.Info("Mock: –†–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä %s %.8f @ %.2f", order.Symbol, order.Quantity, order.Price)

	// –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
	order.Status = types.OrderStatusFilled
	order.FilledAmount = order.Quantity
	order.FilledPrice = order.Price

	return nil
}

func (m *MockExchangeClient) CancelOrder(ctx context.Context, orderID string) error {
	m.logger.Info("Mock: –û—Ç–º–µ–Ω–µ–Ω –æ—Ä–¥–µ—Ä %s", orderID)
	return nil
}

func (m *MockExchangeClient) GetOrder(ctx context.Context, orderID string) (*types.Order, error) {
	return nil, fmt.Errorf("not implemented")
}

func (m *MockExchangeClient) GetActiveOrders(ctx context.Context, symbol string) ([]types.Order, error) {
	return nil, nil
}

func (m *MockExchangeClient) GetFilledOrders(ctx context.Context, symbol string) ([]types.Order, error) {
	return nil, nil
}

func (m *MockExchangeClient) GetTicker(ctx context.Context, symbol string) (*types.Ticker, error) {
	// –ò–º–∏—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC
	price := 45000.0 + float64(time.Now().Unix()%1000) // –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –∫–æ–ª–µ–±–∞–Ω–∏–π —Ü–µ–Ω—ã

	return &types.Ticker{
		Symbol:    symbol,
		Price:     price,
		Bid:       price - 0.1,
		Ask:       price + 0.1,
		Volume:    1000.0,
		Timestamp: time.Now(),
	}, nil
}

func (m *MockExchangeClient) GetOrderBook(ctx context.Context, symbol string, limit int) (*types.OrderBook, error) {
	return nil, fmt.Errorf("not implemented")
}

func (m *MockExchangeClient) GetCandles(ctx context.Context, symbol string, interval string, limit int) ([]types.Candle, error) {
	return nil, fmt.Errorf("not implemented")
}

func (m *MockExchangeClient) GetBalance(ctx context.Context) (*types.Balance, error) {
	return &types.Balance{
		Asset:     "USDT",
		Free:      10000.0,
		Locked:    0.0,
		Total:     10000.0,
		Timestamp: time.Now(),
	}, nil
}

func (m *MockExchangeClient) GetTradingFees(ctx context.Context, symbol string) (*types.TradingFees, error) {
	return &types.TradingFees{
		Symbol:    symbol,
		MakerFee:  0.001,
		TakerFee:  0.001,
		Timestamp: time.Now(),
	}, nil
}

func (m *MockExchangeClient) Ping(ctx context.Context) error {
	return nil
}

func (m *MockExchangeClient) Close() error {
	return nil
}

// startHTTPServer –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func startHTTPServer(ctx context.Context, cfg *config.Config, log *logger.Logger, strategy strategy.Strategy, portfolio *portfolio.Manager) {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	log.Info("HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %d", cfg.App.Port)

	<-ctx.Done()
	log.Info("HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
