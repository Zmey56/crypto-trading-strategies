package main

import (
	"context"
	"fmt"
	"time"

	"github.com/Zmey56/crypto-arbitrage-trader/internal/logger"
	"github.com/Zmey56/crypto-arbitrage-trader/internal/portfolio"
	"github.com/Zmey56/crypto-arbitrage-trader/internal/strategy"
	"github.com/Zmey56/crypto-arbitrage-trader/pkg/types"
)

func main() {
	fmt.Println("üï∏Ô∏è Grid Trading Strategy Example")
	fmt.Println("==================================")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Grid —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
	gridConfig := types.GridConfig{
		Symbol:             "BTCUSDT",
		UpperPrice:         50000.0,
		LowerPrice:         40000.0,
		GridLevels:         10,
		InvestmentPerLevel: 100.0,
		Enabled:            true,
	}

	// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
	log := logger.New(logger.LevelInfo)

	// –°–æ–∑–¥–∞–µ–º mock exchange
	exchange := createMockExchange(log)

	// –°–æ–∑–¥–∞–µ–º portfolio manager
	portfolioManager := portfolio.NewManager(exchange, log)

	// –°–æ–∑–¥–∞–µ–º factory –∏ strategy
	factory := strategy.NewFactory(log)
	gridStrategy, err := factory.CreateGrid(gridConfig, exchange)
	if err != nil {
		log.Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Grid —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: %v", err)
		return
	}

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	if err := gridStrategy.ValidateConfig(); err != nil {
		log.Error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Grid –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
		return
	}

	fmt.Printf("‚úÖ Grid —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è %s\n", gridConfig.Symbol)
	fmt.Printf("üìä –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: $%.2f - $%.2f\n", gridConfig.LowerPrice, gridConfig.UpperPrice)
	fmt.Printf("üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π: %d\n", gridConfig.GridLevels)
	fmt.Printf("üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å: $%.2f\n", gridConfig.InvestmentPerLevel)

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
	status := gridStrategy.GetStatus()
	fmt.Printf("üìà –°—Ç–∞—Ç—É—Å: %d –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤, %d –≤—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫\n",
		status["active_orders"], status["total_trades"])

	// –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
	ctx := context.Background()
	simulateTrading(ctx, gridStrategy, exchange, log, gridConfig.Symbol)

	// –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	fmt.Println("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
	metrics := gridStrategy.GetMetrics()
	fmt.Printf("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: %d\n", metrics.TotalTrades)
	fmt.Printf("–û–±—â–∏–π –æ–±—ä–µ–º: $%.2f\n", metrics.TotalVolume)
	fmt.Printf("–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: $%.2f\n", metrics.TotalProfit)
	fmt.Printf("–í–∏–Ω—Ä–µ–π—Ç: %.2f%%\n", metrics.WinRate*100)

	portfolio := portfolioManager.GetPortfolio()
	fmt.Printf("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: $%.2f\n", portfolio.TotalValue)
	fmt.Printf("–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: $%.2f\n", portfolio.NetProfit)
}

func simulateTrading(ctx context.Context, strategy strategy.Strategy, exchange types.ExchangeClient, log *logger.Logger, symbol string) {
	fmt.Println("\nüîÑ –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏...")

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
	prices := []float64{45000, 42000, 48000, 41000, 49000, 43000, 47000, 44000, 46000, 45000}

	for i, price := range prices {
		fmt.Printf("\nüìä –ò—Ç–µ—Ä–∞—Ü–∏—è %d: –¶–µ–Ω–∞ BTC = $%.2f\n", i+1, price)

		// –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞
		marketData := types.MarketData{
			Symbol:    symbol,
			Price:     price,
			Volume:    1000.0,
			Timestamp: time.Now(),
		}

		// –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
		if err := strategy.Execute(ctx, marketData); err != nil {
			log.Error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: %v", err)
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª
		signal := strategy.GetSignal(marketData)
		if signal.Type != types.SignalTypeHold {
			fmt.Printf("üì° –°–∏–≥–Ω–∞–ª: %s @ $%.2f (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %.8f)\n",
				signal.Type, signal.Price, signal.Quantity)
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
		status := strategy.GetStatus()
		fmt.Printf("üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: %d, –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: %d\n",
			status["active_orders"], status["total_trades"])

		// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
		time.Sleep(500 * time.Millisecond)
	}
}

type MockExchangeClient struct {
	logger *logger.Logger
}

func createMockExchange(log *logger.Logger) types.ExchangeClient {
	return &MockExchangeClient{logger: log}
}

func (m *MockExchangeClient) PlaceOrder(ctx context.Context, order types.Order) error {
	m.logger.Info("Mock: –†–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä %s %.8f @ %.2f", order.Symbol, order.Quantity, order.Price)
	order.Status = types.OrderStatusFilled
	order.FilledAmount = order.Quantity
	order.FilledPrice = order.Price
	return nil
}

func (m *MockExchangeClient) CancelOrder(ctx context.Context, orderID string) error {
	m.logger.Info("Mock: –û—Ç–º–µ–Ω–µ–Ω –æ—Ä–¥–µ—Ä %s", orderID)
	return nil
}

func (m *MockExchangeClient) GetOrder(ctx context.Context, orderID string) (*types.Order, error) {
	return nil, fmt.Errorf("not implemented")
}

func (m *MockExchangeClient) GetActiveOrders(ctx context.Context, symbol string) ([]types.Order, error) {
	return nil, nil
}

func (m *MockExchangeClient) GetFilledOrders(ctx context.Context, symbol string) ([]types.Order, error) {
	return nil, nil
}

func (m *MockExchangeClient) GetTicker(ctx context.Context, symbol string) (*types.Ticker, error) {
	return &types.Ticker{
		Symbol:    symbol,
		Price:     45000.0,
		Bid:       44999.9,
		Ask:       45000.1,
		Volume:    1000.0,
		Timestamp: time.Now(),
	}, nil
}

func (m *MockExchangeClient) GetOrderBook(ctx context.Context, symbol string, limit int) (*types.OrderBook, error) {
	return nil, fmt.Errorf("not implemented")
}

func (m *MockExchangeClient) GetCandles(ctx context.Context, symbol string, interval string, limit int) ([]types.Candle, error) {
	return nil, fmt.Errorf("not implemented")
}

func (m *MockExchangeClient) GetBalance(ctx context.Context) (*types.Balance, error) {
	return &types.Balance{
		Asset:     "USDT",
		Free:      10000.0,
		Locked:    0.0,
		Total:     10000.0,
		Timestamp: time.Now(),
	}, nil
}

func (m *MockExchangeClient) GetTradingFees(ctx context.Context, symbol string) (*types.TradingFees, error) {
	return &types.TradingFees{
		Symbol:    symbol,
		MakerFee:  0.001,
		TakerFee:  0.001,
		Timestamp: time.Now(),
	}, nil
}

func (m *MockExchangeClient) Ping(ctx context.Context) error {
	return nil
}

func (m *MockExchangeClient) Close() error {
	return nil
}
